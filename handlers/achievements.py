from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Achievement
from keyboards.kb import get_main_keyboard
from services.achievement_service import AchievementService
from services.user_service import UserService
from utils.helpers import format_user_stats, format_achievement

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router = Router()


@router.message(Command("achievements"))
async def cmd_achievements(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /achievements"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = UserService(session)
    user = await user_service.get_user_by_tg_id(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievement_service = AchievementService(session)
    all_achievements = await achievement_service.get_all_achievements()
    user_achievements = await achievement_service.get_user_achievements(user.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievement_ids = [ua.achievement_id for ua in user_achievements]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üèÜ <b>–ö–Ω–∏–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</b>\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlocked_achievements = []
    locked_achievements = []
    
    for achievement in all_achievements:
        is_unlocked = achievement.id in user_achievement_ids
        formatted = format_achievement(
            achievement.name,
            achievement.description,
            is_unlocked
        )
        
        if is_unlocked:
            unlocked_achievements.append(formatted)
        else:
            locked_achievements.append(formatted)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if unlocked_achievements:
        message_text += "<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        message_text += "\n\n".join(unlocked_achievements)
        message_text += "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if locked_achievements:
        message_text += "<b>–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å:</b>\n"
        message_text += "\n\n".join(locked_achievements)
        message_text += "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    unlocked_count = len(unlocked_achievements)
    total_count = len(all_achievements)
    progress_percent = int((unlocked_count / total_count) * 100) if total_count > 0 else 0
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar_length = 10
    filled_blocks = int(progress_percent / 100 * progress_bar_length)
    progress_bar = "‚ñ†" * filled_blocks + "‚ñ°" * (progress_bar_length - filled_blocks)
    
    message_text += f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {unlocked_count}/{total_count} ({progress_percent}%)\n"
    message_text += f"[{progress_bar}]"
    
    await message.answer(message_text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'"""
    await cmd_achievements(message, session)


@router.message(Command("stats"))
async def cmd_stats(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = UserService(session)
    user = await user_service.get_user_by_tg_id(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    stats = await user_service.get_user_stats(user.id)
    
    if not stats:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = format_user_stats(stats)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievement_service = AchievementService(session)
    new_achievements = await achievement_service.check_achievements(user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await message.answer(stats_text, parse_mode="HTML", reply_markup=get_main_keyboard())
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if new_achievements:
        achievements_text = "\n\n".join([f"üåü <b>{a.name}</b>\n<i>{a.description}</i>" for a in new_achievements])
        total_xp = sum(a.xp_reward for a in new_achievements)
        
        await message.answer(
            f"üéä <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n{achievements_text}\n\n"
            f"üèÖ –ë–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç: <b>+{total_xp} XP</b>",
            parse_mode="HTML"
        )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    await cmd_stats(message, session) 