from datetime import datetime, date
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import TaskPriority, TaskStatus, User
from keyboards.kb import (
    get_main_keyboard, get_task_priority_keyboard, get_task_actions_keyboard,
    get_tasks_filter_keyboard, get_cancel_keyboard, get_confirmation_keyboard,
    get_tasks_inline_keyboard, get_edit_task_field_keyboard, get_category_selection_keyboard
)
from services.task_service import TaskService
from services.user_service import UserService
from services.achievement_service import AchievementService
from utils.helpers import format_task_message, get_user_id_by_tg_id


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class TaskForm(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_priority = State()
    waiting_for_due_date = State()
    waiting_for_category = State()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class EditTaskForm(StatesGroup):
    choosing_field = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    waiting_for_new_title = State()
    waiting_for_new_description = State()
    waiting_for_new_priority = State()
    waiting_for_new_due_date = State()


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("tasks"))
async def cmd_tasks(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    task_service = TaskService(session)
    tasks = await task_service.get_user_tasks(
        user_id=(await get_user_id_by_tg_id(session, message.from_user.id))
    )
    
    # –í–º–µ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = get_tasks_inline_keyboard(tasks)
    
    if tasks:
        await message.answer(
            "üìù <b>–¢–≤–æ–∏ –∫–≤–µ—Å—Ç—ã (–Ω–∞–∂–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞):</b>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    else:
        await message.answer(
            "üì≠ <b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!</b>\n\n"
            "–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É. "
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</b>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )


@router.message(F.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_tasks(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏'"""
    await cmd_tasks(message, session)


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def create_task_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_creation"))
    
    await message.answer(
        "‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞!</b>\n\n"
        "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—á–µ—Ç¬ª –∏–ª–∏ ¬´–ü—Ä–æ–±–µ–∂–∫–∞ –≤ –ø–∞—Ä–∫–µ¬ª</i>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await state.set_state(TaskForm.waiting_for_title)


@router.callback_query(F.data == "cancel_creation")
async def cancel_task_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤!",
        reply_markup=None
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard())
    await callback.answer()


@router.message(TaskForm.waiting_for_title)
async def process_task_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not message.text or not message.text.strip():
        await message.answer(
            "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            parse_mode="HTML"
        )
        return
        
    if len(message.text) > 200:
        await message.answer(
            "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.update_data(title=message.text.strip())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –æ—Ç–º–µ–Ω—ã
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_creation")
    )
    
    await message.answer(
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!</b>\n\n"
        "üìã –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –¥–µ—Ç–∞–ª–∏:\n\n"
        "<i>–ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª</i>",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await state.set_state(TaskForm.waiting_for_description)


@router.callback_query(TaskForm.waiting_for_description, F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(description=None)
    
    await callback.message.edit_text(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:",
        parse_mode="HTML",
        reply_markup=get_task_priority_keyboard()
    )
    await state.set_state(TaskForm.waiting_for_priority)
    await callback.answer()


@router.message(TaskForm.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(description=message.text)
    
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:",
        parse_mode="HTML",
        reply_markup=get_task_priority_keyboard()
    )
    await state.set_state(TaskForm.waiting_for_priority)


@router.message(TaskForm.waiting_for_priority)
async def process_task_priority(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    if not message.text or message.text not in ["1", "2", "3", "4"]:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 4:",
            parse_mode="HTML",
            reply_markup=get_task_priority_keyboard()
        )
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority_map = {
        "1": TaskPriority.LOW,
        "2": TaskPriority.MEDIUM,
        "3": TaskPriority.HIGH,
        "4": TaskPriority.CRITICAL
    }
    priority = priority_map[message.text]
    await state.update_data(priority=priority)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    if not user_id:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è tg_id {message.from_user.id}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode="HTML"
        )
        return

    task_service = TaskService(session)
    try:
        categories = await task_service.get_user_categories(user_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await message.answer(
            "üìÖ <b>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç?</b>\n\n"
            "–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024)\n"
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Å—Ä–æ–∫–∞.",
            parse_mode="HTML"
        )
        await state.set_state(TaskForm.waiting_for_due_date)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            parse_mode="HTML"
        )
        await state.update_data(category_id=None)
        await state.set_state(TaskForm.waiting_for_due_date)


@router.callback_query(TaskForm.waiting_for_due_date, F.data == "skip_due_date")
async def skip_due_date(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.update_data(due_date=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    task_service = TaskService(session)
    categories = await task_service.get_user_categories(user_id)
    
    if categories:
        await callback.message.edit_text(
            "‚úÖ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω</b>\n\n"
            "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥:",
            parse_mode="HTML",
            reply_markup=get_category_selection_keyboard(categories, None, True)
        )
        await state.set_state(TaskForm.waiting_for_category)
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
        await state.update_data(category_id=None)
        await create_task_final(callback.message, state, session)
    
    await callback.answer()


@router.message(TaskForm.waiting_for_due_date)
async def process_task_due_date(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if message.text and message.text.lower() in ["–Ω–µ—Ç", "no", "–æ—Ç–º–µ–Ω–∞", "cancel", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã
        await state.update_data(due_date=None)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_id = await get_user_id_by_tg_id(session, message.from_user.id)
        task_service = TaskService(session)
        categories = await task_service.get_user_categories(user_id)
        
        if categories:
            await message.answer(
                "‚úÖ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω</b>\n\n"
                "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥:",
                parse_mode="HTML",
                reply_markup=get_category_selection_keyboard(categories, None, True)
            )
            await state.set_state(TaskForm.waiting_for_category)
        else:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
            await state.update_data(category_id=None)
            await create_task_final(message, state, session)
        
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É, –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        due_date = None
        date_formats = ["%d.%m.%Y", "%d/%m/%Y", "%Y-%m-%d"]
        
        for date_format in date_formats:
            try:
                due_date = datetime.strptime(message.text, date_format).date()
                break
            except ValueError:
                continue
        
        if due_date is None:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if due_date < date.today():
            await message.answer(
                "‚ùå <b>–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º</b>\n\n"
                "–£–∫–∞–∂–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –ø—Ä–∏—à–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Å—Ä–æ–∫–∞:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(due_date=due_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
        user_id = await get_user_id_by_tg_id(session, message.from_user.id)
        task_service = TaskService(session)
        categories = await task_service.get_user_categories(user_id)
        
        if categories:
            await message.answer(
                f"‚úÖ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {due_date.strftime('%d.%m.%Y')}\n\n"
                "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥:",
                parse_mode="HTML",
                reply_markup=get_category_selection_keyboard(categories, None, True)
            )
            await state.set_state(TaskForm.waiting_for_category)
        else:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
            await state.update_data(category_id=None)
            await create_task_final(message, state, session)
        
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024) "
            "–∏–ª–∏ –ø—Ä–∏—à–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Å—Ä–æ–∫–∞:",
            parse_mode="HTML"
        )


@router.callback_query(TaskForm.waiting_for_category, F.data.startswith("category:select:"))
async def process_task_category(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_data = callback.data.split(":")[2]
    
    if category_data == "none":
        await state.update_data(category_id=None)
    else:
        category_id = int(category_data)
        await state.update_data(category_id=category_id)
    
    await create_task_final(callback.message, state, session)
    await callback.answer()


async def create_task_final(message: Message, state: FSMContext, session: AsyncSession):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    if not user_id:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è tg_id {message.from_user.id}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TaskService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
    task_service = TaskService(session)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = await task_service.create_task(
            user_id=user_id,
            title=data["title"],
            description=data.get("description"),
            priority=TaskPriority(data["priority"]),
            due_date=data.get("due_date"),
            category_id=data.get("category_id")
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if task.category_id:
            task.category = await task_service.get_category_by_id(task.category_id, user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        await message.answer(
            f"üéâ <b>–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n{format_task_message(task)}",
            parse_mode="HTML",
            reply_markup=get_task_actions_keyboard(task.id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        return


@router.callback_query(F.data.startswith("task:complete:"))
async def complete_task(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–æ–ª–Ω–∏—Ç—å'"""
    task_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    task_service = TaskService(session)
    task = await task_service.complete_task(task_id, user_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
    user_service = UserService(session)
    await user_service.update_completed_tasks_count(user_id)
    await user_service.add_experience(user_id, task.xp_reward)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievement_service = AchievementService(session)
    new_achievements = await achievement_service.check_achievements(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.edit_text(
        f"üéâ <b>–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!</b> +{task.xp_reward} XP\n\n{format_task_message(task)}",
        parse_mode="HTML"
    )
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if new_achievements:
        achievements_text = "\n".join([f"üèÜ <b>{a.name}</b>: {a.description}" for a in new_achievements])
        total_xp = sum(a.xp_reward for a in new_achievements)
        
        await callback.message.answer(
            f"üåü <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n{achievements_text}\n\n"
            f"–ë–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç: <b>+{total_xp} XP</b>",
            parse_mode="HTML"
        )
    
    await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")


@router.callback_query(F.data.startswith("task:progress:"))
async def set_task_in_progress(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'"""
    task_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    task_service = TaskService(session)
    task = await task_service.set_task_in_progress(task_id, user_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.edit_text(
        f"üîÑ <b>–ö–≤–µ—Å—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!</b>\n\n{format_task_message(task)}",
        parse_mode="HTML",
        reply_markup=get_task_actions_keyboard(task.id)
    )
    
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'")


@router.callback_query(F.data.startswith("task:cancel:"))
async def cancel_task(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'"""
    task_id = int(callback.data.split(":")[2])
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        "‚ùì <b>–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç?</b>\n\n"
        "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –Ω–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –æ–ø—ã—Ç–∞.",
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard("cancel_task", task_id)
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm:cancel_task:"))
async def confirm_cancel_task(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
    task_service = TaskService(session)
    task = await task_service.cancel_task(task_id, user_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    await callback.message.edit_text(
        f"‚ùå <b>–ö–≤–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n{format_task_message(task)}",
        parse_mode="HTML"
    )
    
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("task:delete:"))
async def delete_task(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å'"""
    task_id = int(callback.data.split(":")[2])
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å, –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.",
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard("delete_task", task_id)
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm:delete_task:"))
async def confirm_delete_task(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    task_service = TaskService(session)
    success = await task_service.delete_task(task_id, user_id)
    
    if not success:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("üóëÔ∏è <b>–ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω</b>", parse_mode="HTML")
    
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


@router.callback_query(F.data.startswith("tasks:filter:"))
async def filter_tasks(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á"""
    filter_data = callback.data.split(":")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    await show_filtered_tasks(callback, session, user_id, filter_data)


@router.callback_query(F.data == "tasks:list")
async def back_to_tasks_list(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    # –£–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ callback.data
    # callback.data = "tasks:filter:all" 
    # –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await show_filtered_tasks(callback, session, user_id, "all") 


# –ù–µ–º–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: –≤—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
async def show_filtered_tasks(callback: CallbackQuery, session: AsyncSession, user_id: int, filter_data: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    task_service = TaskService(session)
    tasks = []
    filter_name = "–∫–≤–µ—Å—Ç—ã"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if filter_data == "all":
        tasks = await task_service.get_user_tasks(user_id)
        filter_name = "–≤—Å–µ –∫–≤–µ—Å—Ç—ã"
    elif filter_data == "overdue":
        tasks = await task_service.get_overdue_tasks(user_id)
        filter_name = "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"
    else:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        try:
            statuses = [TaskStatus(s) for s in filter_data.split(",")]
            tasks = await task_service.get_user_tasks(user_id, statuses)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            if len(statuses) == 1:
                status_names = {
                    TaskStatus.TODO: "–æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    TaskStatus.IN_PROGRESS: "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                    TaskStatus.DONE: "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
                    TaskStatus.CANCELLED: "–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
                }
                filter_name = status_names.get(statuses[0], "–∫–≤–µ—Å—Ç—ã")
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ (TODO, IN_PROGRESS), —Ç–æ —ç—Ç–æ '–∞–∫—Ç–∏–≤–Ω—ã–µ'
                filter_name = "–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"
        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {filter_data}")
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
            return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = get_tasks_inline_keyboard(tasks)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_text = f"üìã <b>–¢–≤–æ–∏ {filter_name}:</b>"
    if filter_data == "overdue" and tasks:
        header_text = "‚è≥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:</b>\n\n"
        header_text += "<i>–ù–µ –ø–æ–∑–≤–æ–ª—è–π –∏–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è! –í—ã–ø–æ–ª–Ω–∏ –∏—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–∏, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º!</i> üí™"
    elif not tasks:
        header_text = f"üì≠ <b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b> ¬´{filter_name}¬ª"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(
            header_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        await callback.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏
    except Exception as e:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å): {e}") 
        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        await callback.answer()


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data.startswith("task:view:"))
async def view_task_details(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π"""
    task_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    task_service = TaskService(session)
    task = await task_service.get_task_by_id(task_id, user_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    task_message = format_task_message(task)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
    reply_markup = get_task_actions_keyboard(task.id)
    
    await callback.message.edit_text(
        task_message,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    await callback.answer()


@router.callback_query(F.data.startswith("task:edit:"))
async def start_task_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    task_service = TaskService(session)
    task = await task_service.get_task_by_id(task_id, user_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(edit_task_id=task_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
    edit_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ #{task.id}</b>\n\n"
    edit_text += format_task_message(task)
    edit_text += "\n\n‚ùì –ö–∞–∫–æ–µ –ø–æ–ª–µ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    reply_markup = get_edit_task_field_keyboard(task_id)
    
    await callback.message.edit_text(
        edit_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    await state.set_state(EditTaskForm.choosing_field)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ"
@router.callback_query(EditTaskForm.choosing_field, F.data.startswith("edit:field:title:"))
async def edit_task_title_start(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[3]) # –ü–æ–ª—É—á–∞–µ–º task_id –∏–∑ callback_data
    await state.update_data(edit_task_id=task_id) # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—â–µ —Ä–∞–∑
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit:{task_id}"))
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", 
        reply_markup=kb.as_markup()
    )
    await state.set_state(EditTaskForm.waiting_for_new_title)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(EditTaskForm.waiting_for_new_title)
async def process_new_task_title(message: Message, state: FSMContext, session: AsyncSession):
    if len(message.text) > 200:
        await message.answer(
            "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b> (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:", 
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    
    await update_task_field(state, session, user_id, task_id, {"title": message.text}, message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è "–û–ø–∏—Å–∞–Ω–∏–µ"
@router.callback_query(EditTaskForm.choosing_field, F.data.startswith("edit:field:description:"))
async def edit_task_description_start(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[3])
    await state.update_data(edit_task_id=task_id)
    
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="üö´ –û—á–∏—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit:clear_description:{task_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit:{task_id}"),
    )
    
    await callback.message.edit_text(
        "üìã –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏ '–û—á–∏—Å—Ç–∏—Ç—å'):",
        reply_markup=kb.as_markup()
    )
    await state.set_state(EditTaskForm.waiting_for_new_description)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è (–∏–ª–∏ –µ–≥–æ –æ—á–∏—Å—Ç–∫–∏)
@router.message(EditTaskForm.waiting_for_new_description)
async def process_new_task_description(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    
    await update_task_field(state, session, user_id, task_id, {"description": message.text}, message)

@router.callback_query(EditTaskForm.waiting_for_new_description, F.data.startswith("edit:clear_description:"))
async def clear_new_task_description(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    task_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    await update_task_field(state, session, user_id, task_id, {"description": None}, callback.message)
    await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@router.callback_query(EditTaskForm.choosing_field, F.data.startswith("edit:field:priority:"))
async def edit_task_priority_start(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[3])
    await state.update_data(edit_task_id=task_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    kb = get_task_priority_keyboard()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder.from_markup(kb)
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit:{task_id}"))
    
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", 
        reply_markup=builder.as_markup()
    )
    await state.set_state(EditTaskForm.waiting_for_new_priority)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@router.callback_query(EditTaskForm.waiting_for_new_priority, F.data.startswith("priority:"))
async def process_new_task_priority(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    priority_value = TaskPriority(callback.data.split(":")[1])
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∞–∫–∂–µ –≤–ª–∏—è–µ—Ç –Ω–∞ xp_reward –∏ is_important
    task_service = TaskService(session)
    new_xp_reward = task_service._calculate_xp_reward(priority_value)
    is_important = priority_value == TaskPriority.HIGH
    
    update_data = {
        "priority": priority_value,
        "xp_reward": new_xp_reward,
        "is_important": is_important
    }
    
    await update_task_field(state, session, user_id, task_id, update_data, callback.message)
    await callback.answer("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏–ª–∏ –µ–µ –æ—á–∏—Å—Ç–∫–∏)
@router.message(EditTaskForm.waiting_for_new_due_date)
async def process_new_task_due_date(message: Message, state: FSMContext, session: AsyncSession):
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        if due_date < date.today():
            await message.answer(
                "‚ùå <b>–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º</b>. –£–∫–∞–∂–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏ '–£–±—Ä–∞—Ç—å —Å—Ä–æ–∫':",
                parse_mode="HTML"
            )
            return
            
        data = await state.get_data()
        task_id = data.get("edit_task_id")
        user_id = await get_user_id_by_tg_id(session, message.from_user.id)
        
        await update_task_field(state, session, user_id, task_id, {"due_date": due_date}, message)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.12.2025) –∏–ª–∏ –Ω–∞–∂–º–∏ '–£–±—Ä–∞—Ç—å —Å—Ä–æ–∫':",
            parse_mode="HTML"
        )

@router.callback_query(EditTaskForm.waiting_for_new_due_date, F.data.startswith("edit:clear_due_date:"))
async def clear_new_task_due_date(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    task_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    await update_task_field(state, session, user_id, task_id, {"due_date": None}, callback.message)
    await callback.answer("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–±—Ä–∞–Ω")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è FSM ---

async def update_task_field(state: FSMContext, session: AsyncSession, user_id: int, task_id: int, update_data: dict, source_message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –∑–∞–¥–∞—á–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É."""
    task_service = TaskService(session)
    updated_task = await task_service.update_task(task_id, user_id, update_data)
    await state.clear()
    
    if updated_task:
        await source_message.edit_text(
            f"‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{format_task_message(updated_task)}",
            parse_mode="HTML",
            reply_markup=get_task_actions_keyboard(task_id)
        )
    else:
        await source_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

@router.callback_query(F.data.startswith("cancel_edit:"))
async def cancel_edit_task(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏."""
    await state.clear()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–µ —Å–Ω–æ–≤–∞
    task_id = int(callback.data.split(":")[1])
    callback.data = f"task:view:{task_id}" 
    await view_task_details(callback, session)
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ---

async def get_user_id_by_tg_id(session: AsyncSession, tg_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ Telegram ID"""
    user_service = UserService(session)
    user = await user_service.get_user_by_tg_id(tg_id)
    return user.id if user else None 