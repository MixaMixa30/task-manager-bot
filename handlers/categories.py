import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession

from services.task_service import TaskService
from database.models import TaskCategory
from keyboards.kb import (
    get_category_management_keyboard, get_categories_list_keyboard,
    get_category_action_keyboard, get_color_selection_keyboard,
    get_tasks_filter_keyboard, get_category_selection_keyboard
)
from utils.helpers import get_user_id_by_tg_id

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
router = Router()
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CategoryForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_color = State()
    edit_name = State()


@router.callback_query(F.data == "categories:manage")
async def manage_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    await callback.message.edit_text(
        "üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–¥–∞—á</b>\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_category_management_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "categories:list")
async def show_categories_list(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    task_service = TaskService(session)
    
    categories = await task_service.get_user_categories(user_id)
    
    if not categories:
        await callback.message.edit_text(
            "üì≠ <b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏!",
            parse_mode="HTML",
            reply_markup=get_categories_list_keyboard(categories)
        )
    else:
        categories_text = "\n".join([
            f"üìÇ <b>{category.name}</b> - {len(await task_service.get_tasks_by_category(user_id, category.id))} –∑–∞–¥–∞—á"
            for category in categories
        ])
        
        await callback.message.edit_text(
            f"üìÅ <b>–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n{categories_text}",
            parse_mode="HTML",
            reply_markup=get_categories_list_keyboard(categories)
        )
    
    await callback.answer()


@router.callback_query(F.data == "categories:create")
async def create_category_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(CategoryForm.waiting_for_name)
    
    await callback.message.edit_text(
        "üè∑Ô∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(CategoryForm.waiting_for_name)
async def process_category_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if len(message.text) > 50:
        await message.answer(
            "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b> (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(category_name=message.text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ä–∞–∑—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    task_service = TaskService(session)
    
    category = await task_service.create_category(user_id, message.text)
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ "
        f"–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.",
        parse_mode="HTML",
        reply_markup=get_category_action_keyboard(category.id)
    )


@router.callback_query(F.data.startswith("category:view:"))
async def view_category(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–µ –∑–∞–¥–∞—á"""
    category_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    task_service = TaskService(session)
    category = await task_service.get_category_by_id(category_id, user_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tasks = await task_service.get_tasks_by_category(user_id, category_id)
    active_tasks = [t for t in tasks if t.status != "done" and t.status != "cancelled"]
    completed_tasks = [t for t in tasks if t.status == "done"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    message_text = (
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
        f"üî¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{len(tasks)}</b>\n"
        f"‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{len(active_tasks)}</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{len(completed_tasks)}</b>\n\n"
        f"üé® –¶–≤–µ—Ç: <code>{category.color}</code>\n"
        f"üïí –°–æ–∑–¥–∞–Ω–∞: {category.created_at.strftime('%d.%m.%Y')}"
    )
    
    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=get_category_action_keyboard(category.id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("category:edit:name:"))
async def edit_category_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[3])
    await state.set_state(CategoryForm.edit_name)
    await state.update_data(category_id=category_id)
    
    await callback.message.edit_text(
        "üè∑Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(CategoryForm.edit_name)
async def process_edit_category_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if len(message.text) > 50:
        await message.answer(
            "‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b> (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    category_id = data.get("category_id")
    user_id = await get_user_id_by_tg_id(session, message.from_user.id)
    
    task_service = TaskService(session)
    category = await task_service.update_category(category_id, user_id, name=message.text)
    
    await state.clear()
    
    if category:
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{category.name}'</b>",
            parse_mode="HTML",
            reply_markup=get_category_action_keyboard(category.id)
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("category:edit:color:"))
async def edit_category_color_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[3])
    
    await callback.message.edit_text(
        "üé® <b>–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>",
        parse_mode="HTML",
        reply_markup=get_color_selection_keyboard(category_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("category:"))
async def set_category_color(callback: CallbackQuery, session: AsyncSession):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    parts = callback.data.split(":")
    if len(parts) >= 4 and parts[2] == "set_color":
        category_id = int(parts[1])
        color = parts[3]
        
        user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
        task_service = TaskService(session)
        
        category = await task_service.update_category(category_id, user_id, color=color)
        
        if category:
            await callback.answer(f"–¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            callback.data = f"category:view:{category_id}"
            await view_category(callback, session)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("category:delete:"))
async def delete_category_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[2])
    
    from keyboards.kb import get_confirmation_keyboard
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>\n\n"
        "–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'.",
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard("delete_category", category_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm:delete_category:"))
async def confirm_delete_category(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[2])
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    task_service = TaskService(session)
    success = await task_service.delete_category(category_id, user_id)
    
    if success:
        await callback.message.edit_text(
            "üóëÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞</b>",
            parse_mode="HTML",
            reply_markup=get_category_management_keyboard()
        )
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("tasks:filter:category:"))
async def filter_tasks_by_category(callback: CallbackQuery, session: AsyncSession):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_data = callback.data.split(":")[3]
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    
    task_service = TaskService(session)
    
    if category_data == "none":
        # –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        tasks = await task_service.get_tasks_by_category(user_id, None)
        header = "üìÇ <b>–ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>"
    else:
        # –ó–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = int(category_data)
        category = await task_service.get_category_by_id(category_id, user_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        tasks = await task_service.get_tasks_by_category(user_id, category_id)
        header = f"üìÇ <b>–ó–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}':</b>"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    from keyboards.kb import get_tasks_inline_keyboard
    
    if not tasks:
        header = f"{header}\n\nüì≠ <b>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á</b>"
    
    await callback.message.edit_text(
        header,
        parse_mode="HTML",
        reply_markup=get_tasks_inline_keyboard(tasks)
    )
    await callback.answer()


@router.callback_query(F.data == "tasks:show_category_filters")
async def show_category_filters(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    task_service = TaskService(session)
    
    categories = await task_service.get_user_categories(user_id)
    
    await callback.message.edit_text(
        "üìÇ <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á:",
        parse_mode="HTML",
        reply_markup=get_tasks_filter_keyboard(categories)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("edit:field:category:"))
async def edit_task_category_start(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split(":")[3])
    await state.update_data(edit_task_id=task_id)
    
    user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
    task_service = TaskService(session)
    
    categories = await task_service.get_user_categories(user_id)
    
    await callback.message.edit_text(
        "üìÇ <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏:</b>",
        parse_mode="HTML",
        reply_markup=get_category_selection_keyboard(categories, task_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("task:"))
async def set_task_category(callback: CallbackQuery, session: AsyncSession):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    parts = callback.data.split(":")
    if len(parts) >= 4 and parts[2] == "set_category":
        task_id = int(parts[1])
        category_data = parts[3]
        
        user_id = await get_user_id_by_tg_id(session, callback.from_user.id)
        task_service = TaskService(session)
        
        if category_data == "none":
            # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            update_data = {"category_id": None}
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_id = int(category_data)
            update_data = {"category_id": category_id}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        updated_task = await task_service.update_task(task_id, user_id, update_data)
        
        if updated_task:
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
            from handlers.tasks import view_task_details, format_task_message
            from keyboards.kb import get_task_actions_keyboard
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            category_text = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" if updated_task.category_id is None else f"{updated_task.category.name}"
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {category_text}\n\n"
                f"{format_task_message(updated_task)}",
                parse_mode="HTML",
                reply_markup=get_task_actions_keyboard(task_id)
            )
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏", show_alert=True) 