from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import List, Optional

from database.models import TaskPriority, TaskStatus, Task, TaskCategory
from utils.helpers import get_priority_emoji, get_status_emoji


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
        KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
    )
    builder.row(
        KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    )
    builder.row(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    
    return builder.as_markup(resize_keyboard=True)


def get_task_priority_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ö™ –ù–∏–∑–∫–∏–π", callback_data=f"priority:{TaskPriority.LOW.value}"),
        InlineKeyboardButton(text="üîµ –°—Ä–µ–¥–Ω–∏–π", callback_data=f"priority:{TaskPriority.MEDIUM.value}"),
    )
    builder.row(
        InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data=f"priority:{TaskPriority.HIGH.value}"),
        InlineKeyboardButton(text="‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", callback_data=f"priority:{TaskPriority.CRITICAL.value}"),
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))
    
    return builder.as_markup()


def get_task_actions_keyboard(task_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"task:complete:{task_id}"),
        InlineKeyboardButton(text="üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"task:progress:{task_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"task:edit:{task_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"task:cancel:{task_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"task:delete:{task_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks:list"),
    )
    
    return builder.as_markup()


def get_tasks_filter_keyboard(categories: List[TaskCategory] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    builder.row(
        InlineKeyboardButton(text="–í—Å–µ", callback_data="tasks:filter:all"),
        InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data=f"tasks:filter:{TaskStatus.TODO.value},{TaskStatus.IN_PROGRESS.value}"),
    )
    builder.row(
        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data=f"tasks:filter:{TaskStatus.DONE.value}"),
        InlineKeyboardButton(text="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="tasks:filter:overdue"),
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if categories:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        builder.row(InlineKeyboardButton(text="üìÇ –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:", callback_data="ignore"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥ (–∏–ª–∏ –ø–æ 1, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º)
        temp_row = []
        for category in categories:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            cat_name = (category.name[:12] + '..') if len(category.name) > 14 else category.name
            button = InlineKeyboardButton(
                text=f"üìÇ {cat_name}", 
                callback_data=f"tasks:filter:category:{category.id}"
            )
            
            temp_row.append(button)
            if len(temp_row) == 2:
                builder.row(*temp_row)
                temp_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if temp_row:
            builder.row(*temp_row)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        builder.row(InlineKeyboardButton(
            text="üìÇ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
            callback_data="tasks:filter:category:none"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    builder.row(InlineKeyboardButton(
        text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", 
        callback_data="categories:manage"
    ))
    
    return builder.as_markup()


def get_tasks_inline_keyboard(tasks: List[Task]) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
    builder = InlineKeyboardBuilder()
    
    if not tasks:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –ø—Ä—è–º–æ —Å—é–¥–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        # builder.add(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", callback_data="create_task_inline"))
        pass # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    else:
        for task in tasks:
            priority_emoji = get_priority_emoji(task.priority)
            status_emoji = get_status_emoji(task.status)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            category_indicator = ""
            if hasattr(task, 'category') and task.category:
                category_indicator = f"üìÇ "
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            title_short = (task.title[:25] + '...') if len(task.title) > 28 else task.title
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            builder.row(InlineKeyboardButton(
                text=f"{status_emoji} {priority_emoji} {category_indicator}{title_short}", 
                callback_data=f"task:view:{task.id}" # callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
            ))
            
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∏–∑—É
    builder.row(
        InlineKeyboardButton(text="–í—Å–µ", callback_data="tasks:filter:all"),
        InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data=f"tasks:filter:{TaskStatus.TODO.value},{TaskStatus.IN_PROGRESS.value}"),
    )
    builder.row(
        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data=f"tasks:filter:{TaskStatus.DONE.value}"),
        InlineKeyboardButton(text="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="tasks:filter:overdue"),
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    builder.row(InlineKeyboardButton(
        text="üìÇ –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", 
        callback_data="tasks:show_category_filters"
    ))
    
    return builder.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return builder.as_markup()


def get_confirmation_keyboard(action: str, entity_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm:{action}:{entity_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel"),
    )
    return builder.as_markup()


def get_edit_task_field_keyboard(task_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º task_id –≤ callback_data, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è
    builder.row(InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit:field:title:{task_id}"))
    builder.row(InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit:field:description:{task_id}"))
    builder.row(InlineKeyboardButton(text="üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit:field:priority:{task_id}"))
    builder.row(InlineKeyboardButton(text="üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"edit:field:due_date:{task_id}"))
    builder.row(InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit:field:category:{task_id}"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task:view:{task_id}")) # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏
    
    return builder.as_markup()


# –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_category_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="categories:create"))
    builder.row(InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories:list"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data="tasks:list"))
    return builder.as_markup()


def get_category_selection_keyboard(categories: List[TaskCategory], task_id: Optional[int] = None, 
                                   include_cancel: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    
    if categories:
        for category in categories:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cat_name = (category.name[:18] + '..') if len(category.name) > 20 else category.name
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            callback_data = f"category:select:{category.id}"
            if task_id:
                callback_data = f"task:{task_id}:set_category:{category.id}" 
                
            builder.row(InlineKeyboardButton(text=f"üìÇ {cat_name}", callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    callback_data = "category:select:none"
    if task_id:
        callback_data = f"task:{task_id}:set_category:none"
    
    builder.row(InlineKeyboardButton(text="üö´ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=callback_data))
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    if include_cancel:
        callback_data = "cancel"
        if task_id:
            callback_data = f"task:view:{task_id}"
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data))
    
    return builder.as_markup()


def get_category_action_keyboard(category_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"category:edit:name:{category_id}"),
        InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç", callback_data=f"category:edit:color:{category_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"category:delete:{category_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="categories:list")
    )
    return builder.as_markup()


def get_categories_list_keyboard(categories: List[TaskCategory]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    if not categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
        builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="categories:create"))
    else:
        for category in categories:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
            cat_name = (category.name[:18] + '..') if len(category.name) > 20 else category.name
            builder.row(InlineKeyboardButton(
                text=f"üìÇ {cat_name}", 
                callback_data=f"category:view:{category.id}"
            ))
    
    builder.row(InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="categories:create"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="categories:manage"))
    
    return builder.as_markup()


def get_color_selection_keyboard(category_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    colors = [
        ("üî¥ –ö—Ä–∞—Å–Ω—ã–π", "#FF0000"),
        ("üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π", "#FFA500"),
        ("üü° –ñ–µ–ª—Ç—ã–π", "#FFFF00"),
        ("üü¢ –ó–µ–ª–µ–Ω—ã–π", "#00FF00"),
        ("üîµ –°–∏–Ω–∏–π", "#0000FF"),
        ("üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "#800080"),
        ("‚ö´ –ß–µ—Ä–Ω—ã–π", "#000000"),
        ("‚ö™ –°–µ—Ä—ã–π", "#808080")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 —Ü–≤–µ—Ç–∞ –≤ —Ä—è–¥
    for i in range(0, len(colors), 2):
        row = []
        for j in range(2):
            if i + j < len(colors):
                name, hex_code = colors[i + j]
                row.append(InlineKeyboardButton(
                    text=name,
                    callback_data=f"category:{category_id}:set_color:{hex_code}"
                ))
        builder.row(*row)
    
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category:view:{category_id}"))
    
    return builder.as_markup() 