from datetime import date, timedelta
from typing import List, Optional

from database.models import Task, TaskPriority, TaskStatus
from services.user_service import UserService
from sqlalchemy.ext.asyncio import AsyncSession


def get_priority_emoji(priority: TaskPriority) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    if priority == TaskPriority.LOW:
        return "‚ö™"
    elif priority == TaskPriority.MEDIUM:
        return "üîµ"
    elif priority == TaskPriority.HIGH:
        return "üî¥"
    elif priority == TaskPriority.CRITICAL:
        return "‚ö°"
    return "‚ö™"


def get_status_emoji(status: TaskStatus) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    if status == TaskStatus.TODO:
        return "üìù"
    elif status == TaskStatus.IN_PROGRESS:
        return "üîÑ"
    elif status == TaskStatus.DONE:
        return "‚úÖ"
    elif status == TaskStatus.CANCELLED:
        return "‚ùå"
    return "üìù"


def format_task_message(task: Task) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏"""
    priority_emoji = get_priority_emoji(task.priority)
    status_emoji = get_status_emoji(task.status)
    
    status_names = {
        TaskStatus.TODO: "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        TaskStatus.IN_PROGRESS: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
        TaskStatus.DONE: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        TaskStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–æ"
    }
    
    priority_names = {
        TaskPriority.LOW: "–ù–∏–∑–∫–∏–π",
        TaskPriority.MEDIUM: "–°—Ä–µ–¥–Ω–∏–π",
        TaskPriority.HIGH: "–í—ã—Å–æ–∫–∏–π",
        TaskPriority.CRITICAL: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    due_date_str = f"\nüìÖ <b>–°—Ä–æ–∫:</b> {task.due_date.strftime('%d.%m.%Y')}" if task.due_date else ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    description_str = f"\n\n<i>{task.description}</i>" if task.description else ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    completed_str = ""
    if task.status == TaskStatus.DONE and task.completed_at:
        completed_str = f"\n‚ú® <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {task.completed_at.strftime('%d.%m.%Y %H:%M')}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    overdue_str = ""
    if task.due_date and task.due_date < date.today() and task.status in [TaskStatus.TODO, TaskStatus.IN_PROGRESS]:
        overdue_str = "\n‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!</b>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_str = ""
    if hasattr(task, 'category') and task.category:
        category_str = f"\nüìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {task.category.name}"
    
    return (
        f"<b>–ö–≤–µ—Å—Ç #{task.id}: {task.title}</b>{description_str}\n\n"
        f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_names.get(task.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"{priority_emoji} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_names.get(task.priority, '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}"
        f"{due_date_str}"
        f"{category_str}"
        f"{completed_str}"
        f"{overdue_str}\n"
        f"üí™ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task.xp_reward} XP"
    )


def format_tasks_list(tasks: List[Task]) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    if not tasks:
        return ["–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∑–∞–¥–∞—á
    tasks_per_page = 5
    pages = []
    
    for i in range(0, len(tasks), tasks_per_page):
        page_tasks = tasks[i:i+tasks_per_page]
        page_text = ""
        
        for task in page_tasks:
            priority_emoji = get_priority_emoji(task.priority)
            status_emoji = get_status_emoji(task.status)
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
            due_date_str = f" ‚Ä¢ üìÖ {task.due_date.strftime('%d.%m.%Y')}" if task.due_date else ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_str = ""
            if hasattr(task, 'category') and task.category:
                category_str = f" ‚Ä¢ üìÇ {task.category.name}"
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            overdue_mark = " ‚ö†Ô∏è" if task.due_date and task.due_date < date.today() and task.status in [TaskStatus.TODO, TaskStatus.IN_PROGRESS] else ""
            
            page_text += (
                f"{status_emoji} <b>#{task.id}: {task.title}</b>{overdue_mark}\n"
                f"{priority_emoji} {task.priority.value.capitalize()}{due_date_str}{category_str} ‚Ä¢ üí™ {task.xp_reward} XP\n\n"
            )
        
        pages.append(page_text)
    
    return pages


def is_overdue(task: Task) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π"""
    if not task.due_date:
        return False
    
    return task.due_date < date.today() and task.status in [TaskStatus.TODO, TaskStatus.IN_PROGRESS]


def format_user_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    xp_percent = int((stats["experience"] / stats["next_level_xp"]) * 100) if stats["next_level_xp"] > 0 else 0
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar_length = 10
    filled_blocks = int(xp_percent / 100 * progress_bar_length)
    progress_bar = "‚ñ†" * filled_blocks + "‚ñ°" * (progress_bar_length - filled_blocks)
    
    return (
        f"üìä <b>–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π</b>\n\n"
        f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å –≥–µ—Ä–æ—è:</b> {stats['level']}\n"
        f"‚ú® <b>–û–ø—ã—Ç:</b> {stats['experience']}/{stats['next_level_xp']} XP\n"
        f"[{progress_bar}] {xp_percent}%\n\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:</b> {stats['completed_tasks']}\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
    )


def format_achievement(achievement_name: str, achievement_description: str, is_unlocked: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    status_emoji = "üåü" if is_unlocked else "üîí"
    
    if is_unlocked:
        return f"{status_emoji} <b>{achievement_name}</b>\n<i>{achievement_description}</i>"
    else:
        return f"{status_emoji} <b>{achievement_name}</b>\n<i>{achievement_description}</i>"


def get_date_range(days: int = 7) -> tuple:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    today = date.today()
    start_date = today - timedelta(days=days-1)
    return start_date, today


async def get_user_id_by_tg_id(session: AsyncSession, tg_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ Telegram ID"""
    user_service = UserService(session)
    user = await user_service.get_user_by_tg_id(tg_id)
    return user.id if user else None 